class DatabaseYml < Thor
  FILE = 'config/database.yml'

  desc "mysql db_name", "create a database.yml for the named mysql database"
  method_options :force => :boolean
  def mysql(name)
    yml = %(
env: &env
  adapter: mysql
  encoding: utf8
  username: root
  password:
  host: localhost

development:
  <<: *env
  database: #{name}_development

test:
  <<: *env
  database: #{name}_test

cucumber:
  <<: *env
  database: #{name}_test

staging:
  <<: *env
  database: #{name}_staging

production:
  <<: *env
  database: #{name}_production
).lstrip!

    create_file(yml, options)
  end
  
  desc "sqlite", "create a database.yml for sqlite3"
  method_options :force => :boolean
  def sqlite
    yml = %(
env: &env
  adapter: sqlite3
  timeout: 5000

development:
  <<: *env
  database: db/development.sqlite3

test:
  <<: *env
  database: db/test.sqlite3

cucumber:
  <<: *env
  database: db/test.sqlite3

staging:
  <<: *env
  database: db/staging.sqlite3

production:
  <<: *env
  database: db/production.sqlite3
).lstrip!

    create_file(yml, options)
  end
  no_tasks do
    def create_file(yml, options)
      if (!File.exists?(FILE) || File.exists?(FILE) && options.force?)
        File.open(FILE, 'w+') do |f|
          f.print yml
        end
      end
    end
  end
end

